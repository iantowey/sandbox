library(Data2LD)
library(YieldCurve)
library(Data2LD)
data(ECBYieldCurve)
rate.ECB = first(ECBYieldCurve,’2 day’)
maturity.ECB = c(0.25,0.5,seq(1,30,by=1))
NSParameters <- Nelson.Siegel(rate.ECB, maturity.ECB)
NS.rate <- NSrates(NSParameters,maturity.ECB)
plot(maturity.ECB, last(rate.ECB,’1 day’),main="Fitting Nelso Siegel yield curve",
xlab=c("Pillars in years"), ylab=c("Rates"),type="o")
lines(maturity.ECB, last(NS.rate,’1 day’), col=2)
legend("topleft",legend=c("observed yield curve","fitted yield curve"),
col=c(1,2),lty=1)
grid()
library(YieldCurve)
library(Data2LD)
##################################################
# Question 1
##################################################
data(ECBYieldCurve)
rate.ECB = first(ECBYieldCurve,'2 day')
maturity.ECB = c(0.25,0.5,seq(1,30,by=1))
NSParameters <- Nelson.Siegel(rate.ECB, maturity.ECB)
NS.rate <- NSrates(NSParameters,maturity.ECB)
plot(maturity.ECB, last(rate.ECB,'1 day'),main="Fitting Nelso Siegel yield curve",
xlab=c("Pillars in years"), ylab=c("Rates"),type="o")
lines(maturity.ECB, last(NS.rate,'1 day'), col=2)
legend("topleft",legend=c("observed yield curve","fitted yield curve"),
col=c(1,2),lty=1)
grid()
library("Data2LD", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
demo(pac)
demo(package = "Data2LD")
demo("HeadImpact", package = "Data2LD")
data(HeadImpactData)
library("Data2LD")
data(HeadImpactData)
HeadImpact <- HeadImpactData
demo("HeadImpact", package = "Data2LD")
help(Data2LD)
HeadImpactList
modelList2
modelList
TimeData <- RefineryData[,"Time"]
TimeRng  <- range(TimeData)
# Defne a constant basis object
conbasis <- create.constant.basis(TimeRng)
#  Define the two coefficient functions and
#  store these in a coefficient function list
TrayCoefList <- vector("list",2)
# Both coefficients are estimated and both have initial value 0.
TrayCoefList[[1]] <- make.coef(fun=conbasis, parvec=0, estimate=TRUE, coeftype="beta")
TrayCoefList[[2]] <- make.coef(fun=conbasis, parvec=0, estimate=TRUE, coeftype="alpha")
TraycoefResult <- coefCheck(TrayCoefList)
TrayCoefList   <- TraycoefResult$coefList
TrayNtheta     <- TraycoefResult$ntheta
print(paste("ntheta = ",TrayNtheta))
#  Define single homogeneous term with order zero derivative,
#  constant multiplier -1, and defined by the first coeffcient
XTerm <- make.Xterm(variable=1, derivative=0, ncoef=1, factor=-1)
XList <- vector("list", 1)
XList[[1]] <- XTerm
#  Define the step forcing function for the valve setting
Valvebreaks <- c(0,67,193)
Valvenbasis <- 2
Valvenorder <- 1
ValveBasis  <- create.bspline.basis(TimeRng, Valvenbasis, Valvenorder, Valvebreaks)
#  smooth the valve setting data to define the step forcing function
ValveData <- RefineryData[,"Valve.setting"]
Valvefd   <- smooth.basis(TimeData, ValveData, ValveBasis)$fd
#  Define the FList object for the single forcing function
FTerm <- make.Fterm(ncoef=2, Ufd=Valvefd)
FList <- vector("list", 1)
FList[[1]] <- FTerm
#  Define the single differential equation in the first order model
TrayVariable <- make.variable(name="Tray level", order=1, XList=XList, FList=FList)
#  check the object for internal consistency
TrayList=vector("list",1)
TrayList[[1]] <- TrayVariable
#  check the object for internal consistency
TrayList <- modelCheck(TrayList, TrayCoefList)
#  Define the List array containing the tray data
Tray.yList <- list(argvals=RefineryData[,"Time"],
y      =RefineryData[,"Tray.level"])
TrayDataList  <- vector("list",1)
TrayDataList[[1]] <- Tray.yList
# Construct the basis object for tray variable
#  Order 5 spline basis with four knots at the 67
#   to allow discontinuity in the first derivative
#  and 15 knots between 67 and 193
Traynorder <- 5
Traybreaks <- c(0, rep(67,3), seq(67, 193, len=15))
Traynbasis <- 22
TrayBasis  <- create.bspline.basis(c(0,193), Traynbasis, Traynorder, Traybreaks)
#  Set up the basis list for the tray variable
TrayBasisList    <- vector("list",1)
TrayBasisList[[1]] <- TrayBasis
#  Set smoothing constant rho to a value specifying light smoothing
rhoVec <- 0.5
Data2LDList <- Data2LD(TrayDataList, TrayBasisList, TrayList, TrayCoefList, rhoVec)
TrayCoefList
TrayDataList
TrayBasisList
TrayList
TrayCoefList
rhoVec
?rm
wd <- "/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix"
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/init.R")
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/make.coef.R")
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/coefCheck.R")
init(wd)
v <- sourceDirectory("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/")
v <- sourceDirectory("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/")
init(wd)
v <- sourceDirectory("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/")
wd <- "/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix"
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/init.R")
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/make.coef.R")
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/coefCheck.R")
v <- sourceDirectory("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/")
?sourceDirectory
library(R.utils)
library(R.cache)
library(Matrix)
library(fda)
wd <- "/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix"
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/init.R")
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/make.coef.R")
source("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/coefCheck.R")
init(wd)
v <- sourceDirectory("/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Data2LD_Fix/Data2LD_Fix/R/")
measles.data <- read.csv(file='/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Measles.csv', header=TRUE, na.strings = c("*"), colClasses = rep("integer", 10))
num.years = measles.data %>% distinct(YY) %>% nrow
dim(measles.data)
str(measles.data)
measles.data[is.na(measles.data)] <- 0
measles.data = measles.data %>% mutate(dt=as.integer(paste(YY,str_pad(MM,2,pad="0"),str_pad(X.DD,2,pad="0"), sep=""))) %>% select(-c(1,2,3)) %>% arrange(-desc(dt)) %>% mutate(wk_num=row_number()) %>% select(-c(8))
head(measles.data, n=10)
tail(measles.data, n=10)
measles.data <- measles.data[seq(1,300,1),]
measles.rng<- c(0,nrow(measles.data))
plot(measles.data$wk_num, measles.data$London, type = 'l')
plot(measles.data$wk_num, measles.data$Newcastle, type = 'l')
city.population <- list(London=8171000,Bristol=436000,Liverpool=747500, Manchester=661000, Newcastle=269400, Birmingham=1105000, Sheffield=494000)
conbasis <- create.constant.basis(measles.rng)
measles.data <- read.csv(file='/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Measles.csv', header=TRUE, na.strings = c("*"), colClasses = rep("integer", 10))
num.years = measles.data %>% distinct(YY) %>% nrow
dim(measles.data)
str(measles.data)
measles.data[is.na(measles.data)] <- 0
#turn date into something we can work with
measles.data = measles.data %>% mutate(dt=as.integer(paste(YY,str_pad(MM,2,pad="0"),str_pad(X.DD,2,pad="0"), sep=""))) %>% select(-c(1,2,3)) %>% arrange(-desc(dt)) %>% mutate(wk_num=row_number()) %>% select(-c(8))
head(measles.data, n=10)
tail(measles.data, n=10)
measles.data <- measles.data[seq(1,300,1),]
measles.rng<- c(0,nrow(measles.data))
plot(measles.data$wk_num, measles.data$London, type = 'l')
plot(measles.data$wk_num, measles.data$Newcastle, type = 'l')
measles.data$wk_num
measles.data
library(stringr)
library(dplyr)
library(R.utils)
library(R.cache)
library(Matrix)
library(fda)
measles.data <- read.csv(file='/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Measles.csv', header=TRUE, na.strings = c("*"), colClasses = rep("integer", 10))
num.years = measles.data %>% distinct(YY) %>% nrow
dim(measles.data)
str(measles.data)
measles.data[is.na(measles.data)] <- 0
#turn date into something we can work with
measles.data = measles.data %>% mutate(dt=as.integer(paste(YY,str_pad(MM,2,pad="0"),str_pad(X.DD,2,pad="0"), sep=""))) %>% select(-c(1,2,3)) %>% arrange(-desc(dt)) %>% mutate(wk_num=row_number()) %>% select(-c(8))
head(measles.data, n=10)
tail(measles.data, n=10)
measles.data <- measles.data[seq(1,300,1),]
measles.rng<- c(0,nrow(measles.data))
plot(measles.data$wk_num, measles.data$London, type = 'l')
plot(measles.data$wk_num, measles.data$Newcastle, type = 'l')
city.population <- list(London=8171000,Bristol=436000,Liverpool=747500, Manchester=661000, Newcastle=269400, Birmingham=1105000, Sheffield=494000)
conbasis <- create.constant.basis(measles.rng)
#create the coefficients
coefList  <- vector("list",length(names(city.population))^2)
i <- 1
for (city in names(city.population)){
for (c in names(city.population)){
coefList[[i]] <-make.coef(fun=conbasis, parvec=0.1, estimate=TRUE, coeftype="beta")
i <- i + 1
}
}
coefCheckList <- coefCheck(coefList)
# Define the terms in the homogeneous part of the equation
XListList = list()
i = 1
for (c in names(city.population)){
j = 1
XList <- vector("list",length(city.population))
for (city in names(city.population)){
XList[[j]] <- make.Xterm(variable=1, derivative=0, ncoef=i, factor=-1)
i <- i + 1
j <- j + 1
}
XListList[[c]] <- XList
}
#  Define the system of differential equation in the model
measles.ODEList=vector("list",length(city.population))
idx = 1
for (city in names(city.population)){
measles.ODEList[[idx]] <- make.variable(name=city,order=1, XList=XListList[[city]])
idx <- idx + 1
}
#  check the object for internal consistency
measles.ODEList <- modelCheck(measles.ODEList, coefList)
yList <- vector("list",7)
yList[[1]] <- list(argvals=seq(1,nrow(measles.data)), y=as.matrix(measles.data[,-c(8)]))
yList[[2]] <- list(argvals=seq(1,nrow(measles.data)), y=as.matrix(measles.data[,-c(8)]))
yList[[3]] <- list(argvals=seq(1,nrow(measles.data)), y=as.matrix(measles.data[,-c(8)]))
yList[[4]] <- list(argvals=seq(1,nrow(measles.data)), y=as.matrix(measles.data[,-c(8)]))
yList[[5]] <- list(argvals=seq(1,nrow(measles.data)), y=as.matrix(measles.data[,-c(8)]))
yList[[6]] <- list(argvals=seq(1,nrow(measles.data)), y=as.matrix(measles.data[,-c(8)]))
yList[[7]] <- list(argvals=seq(1,nrow(measles.data)), y=as.matrix(measles.data[,-c(8)]))
norder    <- 6
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
norder    <- 5
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
GMSLTimefine <- seq(0,nrow(measles.data),len=1001)
GMSLTBasisfine <- eval.basis(GMSLTimefine, measles.Basis)
matplot(GMSLTimefine, GMSLTBasisfine, type="l", xlim=c(0,nrow(measles.data)), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
dbglev   <-  1    #  debugging level
iterlim  <- 50    #  maximum number of iterations
convrg  <- c(1e-8, 1e-4)  #  convergence criterion
rhoVec <- rep(0.5,7)  #  light smoothing
Data2LDResult <- Data2LD(yList, XbasisList, measles.ODEList, coefList, rhoVec)
length(yList)
length(XbasisList)
length(measles.ODEList)
length(coefList)
length(rhoVec)
length(yList[[1]])
length(yList[[2]])
length(yList[[2]]$y)
length(yList[[1]]$y)
yList[[1]]$y
#import data
measles.data <- read.csv(file='/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Measles.csv', header=TRUE, na.strings = c("*"), colClasses = rep("integer", 10))
num.years = measles.data %>% distinct(YY) %>% nrow
measles.data[is.na(measles.data)] <- 0
#sort data
measles.data = measles.data %>% mutate(dt=as.integer(paste(YY,str_pad(MM,2,pad="0"),str_pad(X.DD,2,pad="0"), sep=""))) %>% select(-c(1,2,3)) %>% arrange(-desc(dt)) %>% mutate(wk_num=row_number()) %>% select(-c(8))
#sort data
measles.data <- measles.data[seq(1,300,1),]
measles.rng<- c(0,nrow(measles.data))
plot(measles.data$wk_num, measles.data$London, type = 'l')
plot(measles.data$wk_num, measles.data$Newcastle, type = 'l')
city.population <- list(London=8171000,Bristol=436000,Liverpool=747500, Manchester=661000, Newcastle=269400, Birmingham=1105000, Sheffield=494000)
conbasis <- create.constant.basis(measles.rng)
#create the coefficients
coefList  <- vector("list",length(names(city.population))^2)
i <- 1
for (city in names(city.population)){
for (c in names(city.population)){
coefList[[i]] <-make.coef(fun=conbasis, parvec=0.1, estimate=TRUE, coeftype="beta")
i <- i + 1
}
}
coefCheckList <- coefCheck(coefList)
# Define the terms in the homogeneous part of the equation
XListList = list()
i = 1
for (c in names(city.population)){
j = 1
XList <- vector("list",length(city.population))
for (city in names(city.population)){
XList[[j]] <- make.Xterm(variable=1, derivative=0, ncoef=i, factor=-1)
i <- i + 1
j <- j + 1
}
XListList[[c]] <- XList
}
#  Define the system of differential equation in the model
measles.ODEList=vector("list",length(city.population))
idx = 1
for (city in names(city.population)){
measles.ODEList[[idx]] <- make.variable(name=city,order=1, XList=XListList[[city]])
idx <- idx + 1
}
#  check the object for internal consistency
measles.ODEList <- modelCheck(measles.ODEList, coefList)
yList <- vector("list",7)
yList[[1]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data$London)
yList[[2]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data$Bristol)
yList[[3]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data$Liverpool)
yList[[4]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data$Manchester)
yList[[5]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data$Newcastle)
yList[[6]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data$Birmingham)
yList[[7]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data$Sheffield)
norder    <-
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
norder    <-
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
nbasis
norder    <- 6
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
nbasis
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
GMSLTimefine <- seq(0,nrow(measles.data),len=1001)
GMSLTBasisfine <- eval.basis(GMSLTimefine, measles.Basis)
matplot(GMSLTimefine, GMSLTBasisfine, type="l", xlim=c(0,nrow(measles.data)), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
length(yList[[1]]$y)
length(XbasisList)
length(measles.ODEList)
length(coefList)
length(rhoVec)
rhoVec <- rep(0.5,7)  #  light smoothing
Data2LDResult <- Data2LD(yList, XbasisList, measles.ODEList, coefList, rhoVec)
yList <- vector("list",7)
idx = 1
for (city in names(city.population)){
yList[[idx]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data[[city]])
idx <- idx + 1
}
yList
measles.rng
norder    <- 12
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
GMSLTimefine <- seq(0,nrow(measles.data),len=1001)
GMSLTBasisfine <- eval.basis(GMSLTimefine, measles.Basis)
matplot(GMSLTimefine, GMSLTBasisfine, type="l", xlim=c(0,nrow(measles.data)), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
norder    <- 5
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
GMSLTimefine <- seq(0,nrow(measles.data),len=1001)
GMSLTBasisfine <- eval.basis(GMSLTimefine, measles.Basis)
matplot(GMSLTimefine, GMSLTBasisfine, type="l", xlim=c(0,nrow(measles.data)), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
norder    <- 7
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
GMSLTimefine <- seq(0,nrow(measles.data),len=1001)
GMSLTBasisfine <- eval.basis(GMSLTimefine, measles.Basis)
matplot(GMSLTimefine, GMSLTBasisfine, type="l", xlim=c(0,nrow(measles.data)), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
dbglev   <-  1    #  debugging level
iterlim  <- 50    #  maximum number of iterations
convrg  <- c(1e-8, 1e-4)  #  convergence criterion
rhoVec <- rep(0.5,7)  #  light smoothing
length(yList[[1]]$y)
length(XbasisList)
length(measles.ODEList)
length(coefList)
length(rhoVec)
Data2LDResult <- Data2LD(yList, XbasisList, measles.ODEList, coefList, rhoVec)
measles.data <- read.csv(file='/home/ian/Desktop/ACM41000-Uncertainty-Quantification/assignement3/Measles.csv', header=TRUE, na.strings = c("*"), colClasses = rep("integer", 10))
num.years = measles.data %>% distinct(YY) %>% nrow
measles.data[is.na(measles.data)] <- 0
#sort data
measles.data = measles.data %>% mutate(dt=as.integer(paste(YY,str_pad(MM,2,pad="0"),str_pad(X.DD,2,pad="0"), sep=""))) %>% select(-c(1,2,3)) %>% arrange(-desc(dt)) %>% mutate(wk_num=row_number()) %>% select(-c(8))
measles.data <- measles.data[seq(1,316,1),]
measles.rng<- c(0,nrow(measles.data))
plot(measles.data$wk_num, measles.data$London, type = 'l')
plot(measles.data$wk_num, measles.data$Newcastle, type = 'l')
#set up vars
city.population <- list(London=8171000,Bristol=436000,Liverpool=747500, Manchester=661000, Newcastle=269400, Birmingham=1105000, Sheffield=494000)
conbasis <- create.constant.basis(measles.rng)
#create the coefficients
coefList  <- vector("list",length(names(city.population))^2)
i <- 1
for (city in names(city.population)){
for (c in names(city.population)){
coefList[[i]] <-make.coef(fun=conbasis, parvec=0.1, estimate=TRUE, coeftype="beta")
i <- i + 1
}
}
coefCheckList <- coefCheck(coefList)
# Define the terms in the homogeneous part of the equation
XListList = list()
i = 1
for (c in names(city.population)){
j = 1
XList <- vector("list",length(city.population))
for (city in names(city.population)){
XList[[j]] <- make.Xterm(variable=1, derivative=0, ncoef=i, factor=-1)
i <- i + 1
j <- j + 1
}
XListList[[c]] <- XList
}
#  Define the system of differential equation in the model
measles.ODEList=vector("list",length(city.population))
idx = 1
for (city in names(city.population)){
measles.ODEList[[idx]] <- make.variable(name=city,order=1, XList=XListList[[city]])
idx <- idx + 1
}
#  check the object for internal consistency
measles.ODEList <- modelCheck(measles.ODEList, coefList)
#setup data
yList <- vector("list",7)
idx = 1
for (city in names(city.population)){
yList[[idx]] <- list(argvals=seq(1,nrow(measles.data)), y=measles.data[[city]])
idx <- idx + 1
}
#define basis functions
norder    <- 7
break.array <- seq(25,nrow(measles.data),52)
nbreaks   <- length(break.array)
nbasis    <- norder + nbreaks - 2
measles.Basis  <- create.bspline.basis(measles.rng, nbasis)
XbasisList <- vector("list",7)
XbasisList[[1]] <- measles.Basis
XbasisList[[2]] <- measles.Basis
XbasisList[[3]] <- measles.Basis
XbasisList[[4]] <- measles.Basis
XbasisList[[5]] <- measles.Basis
XbasisList[[6]] <- measles.Basis
XbasisList[[7]] <- measles.Basis
GMSLTimefine <- seq(0,nrow(measles.data),len=1001)
GMSLTBasisfine <- eval.basis(GMSLTimefine, measles.Basis)
matplot(GMSLTimefine, GMSLTBasisfine, type="l", xlim=c(0,nrow(measles.data)), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
dbglev   <-  1    #  debugging level
iterlim  <- 50    #  maximum number of iterations
convrg  <- c(1e-8, 1e-4)  #  convergence criterion
rhoVec <- rep(0.5,7)  #  light smoothing
length(yList[[1]]$y)
length(XbasisList)
length(measles.ODEList)
length(coefList)
length(rhoVec)
Data2LDResult <- Data2LD(yList, XbasisList, measles.ODEList, coefList, rhoVec)
