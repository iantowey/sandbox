source("/Volumes/GoogleDrive/My Drive/DDA_Course/Data2LD_Rpkg/R/Data2LD.R")
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
library(Data2LD)
data(HeadImpactData)
HeadImpactTime <- HeadImpactData[,2]  #  time in milliseconds
HeadImpact     <- HeadImpactData[,3]  #  acceleration in millimeters/millisecond^2
HeadImpactRng  <- c(0,60) # Define range time for estimated model
# plot the data along with a unit pulse
plot(HeadImpactTime, HeadImpact, type="p", xlim=c(0,60),  ylim=c(-1.0,1.5),
xlab="Time (milliseconds)", ylab="Acceleration (mm/msec^2)")
lines(c( 0,60), c(0,0), lty=3)
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
lines(c(14,15), c(1,1), lty=2)
#  Define the List array containing the data
yList1 = list(argvals=HeadImpactTime, y=HeadImpact)
yList <- vector("list",1)
yList[[1]] <- yList1
#  Construct basis for output x(t), multiple knots at times 14 and 15
#  Order 6 spline basis, with three knots at the impact point and
#  three knots at impact + delta to permit discontinuous first
#  derivatives at these points
knots     <- c(0,14,14,14,15,15,seq(15,60,len=11))
norder    <- 6
nbasis    <- 21
HeadImpactBasis <- create.bspline.basis(HeadImpactRng,nbasis,norder,knots)
#  plot the basis
HeadImpactTimefine <- seq(0,60,len=201)
HeadImpactBasisfine <- eval.basis(HeadImpactTimefine, HeadImpactBasis)
matplot(HeadImpactTimefine, HeadImpactBasisfine, type="l", xlim=c(0,60), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
#  set up basis list
XbasisList <- vector("list",1)
XbasisList[[1]] <- HeadImpactBasis
# Set up the constant basis
conbasis <- create.constant.basis(HeadImpactRng)
# Define the three constant coefficient functions
coef1 <- make.coef(fun=conbasis, parvec=0.073, estimate=TRUE, coeftype="beta")
coef2 <- make.coef(fun=conbasis, parvec=0.01,  estimate=TRUE, coeftype="beta")
coef3 <- make.coef(fun=conbasis, parvec=0.25,  estimate=TRUE, coeftype="alpha")
#  Set up the coefficient list
coefList  <- vector("list",3)
coefList[[1]] <- coef1
coefList[[2]] <- coef2
coefList[[3]] <- coef3
#  check coefficient list
coefCheckList <- coefCheck(coefList)
coefList      <- coefCheckList$coefList
ntheta        <- coefCheckList$ntheta
print(paste("ntheta = ",ntheta))
# Define the two terms in the homogeneous part of the equation
Xterm0 <- make.Xterm(variable=1, derivative=0, ncoef=1, factor=1)
Xterm1 <- make.Xterm(variable=1, derivative=1, ncoef=2, factor=-1)
# Set up the XList vector of length two
XList <- vector("list",2)
XList[[1]] <- Xterm0
XList[[2]] <- Xterm1
# Define a unit pulse function located at times 14-15
Pulsebasis <- create.bspline.basis(HeadImpactRng, 3, 1, c(0,14,15,60))
Pulsefd    <- fd(matrix(c(0,1,0),3,1),Pulsebasis)
# Define the forcing term
Fterm      <- make.Fterm(ncoef=3, Ufd=Pulsefd, factor=1)
# Set up the forcing term list of length one
FList      <- vector("list",1)
FList[[1]] <- Fterm
#  Define the single differential equation in the model
HeadImpactVariable <- make.variable(order=2, XList=XList, FList=FList)
#  Define list of length one containing the equation definition
HeadImpactList=vector("list",1)
HeadImpactList[[1]] <- HeadImpactVariable
#  check the object for internal consistency
HeadImpactList <- modelCheck(HeadImpactList, coefList)
# An evaluation of the criterion at the initial values
rhoVec <- 0.5  #  light smoothing
#  This command causes Data2LD to set up and save the tensors
debugonce(Data2LD())
debugonce(Data2LD)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
modelList <- modelCheck(modelList, coefList)
nvar <- length(modelList)
coefCheckList <- coefCheck(coefList)
coefList <- coefCheckList$coefList
ntheta <- coefCheckList$ntheta
nhomog <- rep(0, nvar)
nforce <- rep(0, nvar)
nthetaH <- 0
nthetaF <- 0
nvar
ivar=1
modelListi <- modelList[[ivar]]
nXterm <- modelListi$nallXterm
nXterm
nhomog[ivar] <- nXterm
iterm=1;
nXterm
XListi <- modelListi$XList[[iterm]]
ncoefi <- XListi$ncoef
coefListi <- coefList[[ncoefi]]
if (coefListi$estimate == TRUE) {
nthetaH <- nthetaH + length(coefListi$parvec)
}
modelListi <- modelList[[ivar]]
nXterm <- modelListi$nallXterm
if (nXterm > 0) {
nhomog[ivar] <- nXterm
for (iterm in 1:nXterm) {
XListi <- modelListi$XList[[iterm]]
ncoefi <- XListi$ncoef
coefListi <- coefList[[ncoefi]]
if (coefListi$estimate == TRUE) {
nthetaH <- nthetaH + length(coefListi$parvec)
}
}
}
debugonce(Data2LD)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
debugonce(Data2LD)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
debugonce(Data2LD)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
debugonce(Btensorfn)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
debugonce(Btensorfn)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
debugonce(Btensorfn)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
debugonce(inprod.Data2LD)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
debugonce(inprod.Data2LD)
debugonce(inprod.Data2LD.R)
debugonce(inprod.Data2LD)
sessionInfo()
install.packages("Data2LD")
install.packages("Data2LD")
library("Data2LD")
data(HeadImpactData)
HeadImpactTime <- HeadImpactData[,2]  #  time in milliseconds
HeadImpact     <- HeadImpactData[,3]  #  acceleration in millimeters/millisecond^2
HeadImpactRng  <- c(0,60) # Define range time for estimated model
# plot the data along with a unit pulse
plot(HeadImpactTime, HeadImpact, type="p", xlim=c(0,60),  ylim=c(-1.0,1.5),
xlab="Time (milliseconds)", ylab="Acceleration (mm/msec^2)")
lines(c( 0,60), c(0,0), lty=3)
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
lines(c(14,15), c(1,1), lty=2)
#  Define the List array containing the data
yList1 = list(argvals=HeadImpactTime, y=HeadImpact)
yList <- vector("list",1)
yList[[1]] <- yList1
#  Construct basis for output x(t), multiple knots at times 14 and 15
#  Order 6 spline basis, with three knots at the impact point and
#  three knots at impact + delta to permit discontinuous first
#  derivatives at these points
knots     <- c(0,14,14,14,15,15,seq(15,60,len=11))
norder    <- 6
nbasis    <- 21
HeadImpactBasis <- create.bspline.basis(HeadImpactRng,nbasis,norder,knots)
#  plot the basis
HeadImpactTimefine <- seq(0,60,len=201)
HeadImpactBasisfine <- eval.basis(HeadImpactTimefine, HeadImpactBasis)
matplot(HeadImpactTimefine, HeadImpactBasisfine, type="l", xlim=c(0,60), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
#  set up basis list
XbasisList <- vector("list",1)
XbasisList[[1]] <- HeadImpactBasis
# Set up the constant basis
conbasis <- create.constant.basis(HeadImpactRng)
# Define the three constant coefficient functions
coef1 <- make.coef(fun=conbasis, parvec=0.073, estimate=TRUE, coeftype="beta")
coef2 <- make.coef(fun=conbasis, parvec=0.01,  estimate=TRUE, coeftype="beta")
coef3 <- make.coef(fun=conbasis, parvec=0.25,  estimate=TRUE, coeftype="alpha")
#  Set up the coefficient list
coefList  <- vector("list",3)
coefList[[1]] <- coef1
coefList[[2]] <- coef2
coefList[[3]] <- coef3
#  check coefficient list
coefCheckList <- coefCheck(coefList)
coefList      <- coefCheckList$coefList
ntheta        <- coefCheckList$ntheta
print(paste("ntheta = ",ntheta))
# Define the two terms in the homogeneous part of the equation
Xterm0 <- make.Xterm(variable=1, derivative=0, ncoef=1, factor=1)
Xterm1 <- make.Xterm(variable=1, derivative=1, ncoef=2, factor=-1)
# Set up the XList vector of length two
XList <- vector("list",2)
XList[[1]] <- Xterm0
XList[[2]] <- Xterm1
# Define a unit pulse function located at times 14-15
Pulsebasis <- create.bspline.basis(HeadImpactRng, 3, 1, c(0,14,15,60))
Pulsefd    <- fd(matrix(c(0,1,0),3,1),Pulsebasis)
# Define the forcing term
Fterm      <- make.Fterm(ncoef=3, Ufd=Pulsefd, factor=1)
# Set up the forcing term list of length one
FList      <- vector("list",1)
FList[[1]] <- Fterm
#  Define the single differential equation in the model
HeadImpactVariable <- make.variable(order=2, XList=XList, FList=FList)
#  Define list of length one containing the equation definition
HeadImpactList=vector("list",1)
HeadImpactList[[1]] <- HeadImpactVariable
#  check the object for internal consistency
HeadImpactList <- modelCheck(HeadImpactList, coefList)
# An evaluation of the criterion at the initial values
rhoVec <- 0.5  #  light smoothing
#  This command causes Data2LD to set up and save the tensors
debugonce(inprod.Data2LD.R)
debugonce(inprod.Data2LD)
source('~/Downloads/Data2LD 4/R/inprod.Data2LD.R')
debugonce(inprod.Data2LD)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
source('~/Downloads/Data2LD 4/R/inprod.Data2LD.R')
library("Data2LD_Fix")
library("Data2LD_Fix")
library("Data2LD")
HeadImpactTime <- HeadImpact[,2]  #  time in milliseconds
HeadImpact     <- HeadImpact[,3]  #  acceleration in millimeters/millisecond^2
HeadImpactRng  <- c(0,60) # Define range time for estimated model
# plot the data along with a unit pulse
plot(HeadImpactTime, HeadImpact, type="p", xlim=c(0,60),  ylim=c(-1.0,1.5),
xlab="Time (milliseconds)", ylab="Acceleration (mm/msec^2)")
lines(c( 0,60), c(0,0), lty=3)
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
lines(c(14,15), c(1,1), lty=2)
# Set up the constant basis
conbasis <- create.constant.basis(HeadImpactRng)
# Define the three constant coefficient functions
coef1 <- make.coef(fun=conbasis, parvec=0.073, estimate=TRUE, coeftype="beta")
coef2 <- make.coef(fun=conbasis, parvec=0.01,  estimate=TRUE, coeftype="beta")
coef3 <- make.coef(fun=conbasis, parvec=0.25,  estimate=TRUE, coeftype="alpha")
#  Set up the coefficient list
coefList  <- vector("list",3)
coefList[[1]] <- coef1
coefList[[2]] <- coef2
coefList[[3]] <- coef3
#  check coefficient list
coefCheckList <- coefCheck(coefList)
coefList      <- coefCheckList$coefList
ntheta        <- coefCheckList$ntheta
print(paste("ntheta = ",ntheta))
# Define the two terms in the homogeneous part of the equation
Xterm0 <- make.Xterm(variable=1, derivative=0, ncoef=1, factor=-1)
Xterm1 <- make.Xterm(variable=1, derivative=1, ncoef=2, factor=-1)
# Set up the XList vector of length two
XList <- vector("list",2)
XList[[1]] <- Xterm0
XList[[2]] <- Xterm1
# Define a unit pulse function located at times 14-15
Pulsebasis <- create.bspline.basis(HeadImpactRng, 3, 1, c(0,14,15,60))
Pulsefd    <- fd(matrix(c(0,1,0),3,1),Pulsebasis)
# Define the forcing term
Fterm      <- make.Fterm(ncoef=3, Ufd=Pulsefd, factor=1)
# Set up the forcing term list of length one
FList      <- vector("list",1)
FList[[1]] <- Fterm
#  Define the single differential equation in the model
HeadImpactVariable <- make.variable(order=2, XList=XList, FList=FList)
#  Define list of length one containing the equation definition
HeadImpactList=vector("list",1)
HeadImpactList[[1]] <- HeadImpactVariable
#  check the object for internal consistency
HeadImpactList <- modelCheck(HeadImpactList, coefList)
#  Define the List array containing the data
yList1 = list(argvals=HeadImpactTime, y=HeadImpact)
yList <- vector("list",1)
yList[[1]] <- yList1
#  Construct basis for output x(t), multiple knots at times 14 and 15
#  Order 6 spline basis, with three knots at the impact point and
#  three knots at impact + delta to permit discontinuous first
#  derivatives at these points
knots     <- c(0,14,14,14,15,15,seq(15,60,len=11))
norder    <- 6
nbasis    <- 21
HeadImpactBasis <- create.bspline.basis(HeadImpactRng,nbasis,norder,knots)
#  plot the basis
HeadImpactTimefine <- seq(0,60,len=201)
HeadImpactBasisfine <- eval.basis(HeadImpactTimefine, HeadImpactBasis)
matplot(HeadImpactTimefine, HeadImpactBasisfine, type="l", xlim=c(0,60), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
#  set up basis list
XbasisList <- vector("list",1)
XbasisList[[1]] <- HeadImpactBasis
# An evaluation of the criterion at the initial values
rhoVec <- 0.5  #  light smoothing
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
install.packages("Data2LD")
setwd("/Users/michellecarey/Desktop/Data2LD_Fix/R")
setwd("/Users/michellecarey/Desktop/Data2LD_Fix/data")
data(HeadImpact)
setwd("/Users/michellecarey/Desktop/Data2LD_Fix/R")
setwd("/Users/michellecarey/Desktop/Data2LD_Fix/data")
load(file = "HeadImpactData.rda")
setwd("/Users/michellecarey/Desktop/Data2LD_Fix/R")
HeadImpactTime <- HeadImpact[,2]  #  time in milliseconds
HeadImpact     <- HeadImpact[,3]  #  acceleration in millimeters/millisecond^2
HeadImpactRng  <- c(0,60) # Define range time for estimated model
# plot the data along with a unit pulse
plot(HeadImpactTime, HeadImpact, type="p", xlim=c(0,60),  ylim=c(-1.0,1.5),
xlab="Time (milliseconds)", ylab="Acceleration (mm/msec^2)")
lines(c( 0,60), c(0,0), lty=3)
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
lines(c(14,15), c(1,1), lty=2)
# Set up the constant basis
conbasis <- create.constant.basis(HeadImpactRng)
# Define the three constant coefficient functions
coef1 <- make.coef(fun=conbasis, parvec=0.073, estimate=TRUE, coeftype="beta")
coef2 <- make.coef(fun=conbasis, parvec=0.01,  estimate=TRUE, coeftype="beta")
coef3 <- make.coef(fun=conbasis, parvec=0.25,  estimate=TRUE, coeftype="alpha")
#  Set up the coefficient list
coefList  <- vector("list",3)
coefList[[1]] <- coef1
coefList[[2]] <- coef2
coefList[[3]] <- coef3
#  check coefficient list
coefCheckList <- coefCheck(coefList)
coefList      <- coefCheckList$coefList
ntheta        <- coefCheckList$ntheta
print(paste("ntheta = ",ntheta))
# Define the two terms in the homogeneous part of the equation
Xterm0 <- make.Xterm(variable=1, derivative=0, ncoef=1, factor=-1)
Xterm1 <- make.Xterm(variable=1, derivative=1, ncoef=2, factor=-1)
# Set up the XList vector of length two
XList <- vector("list",2)
XList[[1]] <- Xterm0
XList[[2]] <- Xterm1
# Define a unit pulse function located at times 14-15
Pulsebasis <- create.bspline.basis(HeadImpactRng, 3, 1, c(0,14,15,60))
Pulsefd    <- fd(matrix(c(0,1,0),3,1),Pulsebasis)
# Define the forcing term
Fterm      <- make.Fterm(ncoef=3, Ufd=Pulsefd, factor=1)
# Set up the forcing term list of length one
FList      <- vector("list",1)
FList[[1]] <- Fterm
#  Define the single differential equation in the model
HeadImpactVariable <- make.variable(order=2, XList=XList, FList=FList)
#  Define list of length one containing the equation definition
HeadImpactList=vector("list",1)
HeadImpactList[[1]] <- HeadImpactVariable
#  check the object for internal consistency
HeadImpactList <- modelCheck(HeadImpactList, coefList)
#  Define the List array containing the data
yList1 = list(argvals=HeadImpactTime, y=HeadImpact)
yList <- vector("list",1)
yList[[1]] <- yList1
#  Construct basis for output x(t), multiple knots at times 14 and 15
#  Order 6 spline basis, with three knots at the impact point and
#  three knots at impact + delta to permit discontinuous first
#  derivatives at these points
knots     <- c(0,14,14,14,15,15,seq(15,60,len=11))
norder    <- 6
nbasis    <- 21
HeadImpactBasis <- create.bspline.basis(HeadImpactRng,nbasis,norder,knots)
#  plot the basis
HeadImpactTimefine <- seq(0,60,len=201)
HeadImpactBasisfine <- eval.basis(HeadImpactTimefine, HeadImpactBasis)
matplot(HeadImpactTimefine, HeadImpactBasisfine, type="l", xlim=c(0,60), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
#  set up basis list
XbasisList <- vector("list",1)
XbasisList[[1]] <- HeadImpactBasis
# An evaluation of the criterion at the initial values
rhoVec <- 0.5  #  light smoothing
setwd("/Users/michellecarey/Desktop/Data2LD_Fix/data")
load(file = "HeadImpactData.rda")
HeadImpactTime <- HeadImpact[,2]  #  time in milliseconds
HeadImpact     <- HeadImpact[,3]
View(HeadImpactData)
View(HeadImpactData)
View(HeadImpactData)
HeadImpactTime <- HeadImpactData[,2]  #  time in milliseconds
HeadImpact     <- HeadImpactData[,3]  #  acceleration in millimeters/millisecond^2
HeadImpactRng  <- c(0,60) # Define range time for estimated model
# plot the data along with a unit pulse
plot(HeadImpactTime, HeadImpact, type="p", xlim=c(0,60),  ylim=c(-1.0,1.5),
xlab="Time (milliseconds)", ylab="Acceleration (mm/msec^2)")
lines(c( 0,60), c(0,0), lty=3)
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
lines(c(14,15), c(1,1), lty=2)
conbasis <- create.constant.basis(HeadImpactRng)
# Define the three constant coefficient functions
coef1 <- make.coef(fun=conbasis, parvec=0.073, estimate=TRUE, coeftype="beta")
coef2 <- make.coef(fun=conbasis, parvec=0.01,  estimate=TRUE, coeftype="beta")
coef3 <- make.coef(fun=conbasis, parvec=0.25,  estimate=TRUE, coeftype="alpha")
library(R.utils)
sourceDirectory("/Users/michellecarey/Desktop/Data2LD_Fix/R")
HeadImpactTime <- HeadImpactData[,2]  #  time in milliseconds
HeadImpact     <- HeadImpactData[,3]  #  acceleration in millimeters/millisecond^2
HeadImpactRng  <- c(0,60) # Define range time for estimated model
# plot the data along with a unit pulse
plot(HeadImpactTime, HeadImpact, type="p", xlim=c(0,60),  ylim=c(-1.0,1.5),
xlab="Time (milliseconds)", ylab="Acceleration (mm/msec^2)")
lines(c( 0,60), c(0,0), lty=3)
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
lines(c(14,15), c(1,1), lty=2)
# Set up the constant basis
conbasis <- create.constant.basis(HeadImpactRng)
# Define the three constant coefficient functions
coef1 <- make.coef(fun=conbasis, parvec=0.073, estimate=TRUE, coeftype="beta")
coef2 <- make.coef(fun=conbasis, parvec=0.01,  estimate=TRUE, coeftype="beta")
coef3 <- make.coef(fun=conbasis, parvec=0.25,  estimate=TRUE, coeftype="alpha")
library(fda)
HeadImpactTime <- HeadImpactData[,2]  #  time in milliseconds
HeadImpact     <- HeadImpactData[,3]  #  acceleration in millimeters/millisecond^2
HeadImpactRng  <- c(0,60) # Define range time for estimated model
# plot the data along with a unit pulse
plot(HeadImpactTime, HeadImpact, type="p", xlim=c(0,60),  ylim=c(-1.0,1.5),
xlab="Time (milliseconds)", ylab="Acceleration (mm/msec^2)")
lines(c( 0,60), c(0,0), lty=3)
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
lines(c(14,15), c(1,1), lty=2)
# Set up the constant basis
conbasis <- create.constant.basis(HeadImpactRng)
# Define the three constant coefficient functions
coef1 <- make.coef(fun=conbasis, parvec=0.073, estimate=TRUE, coeftype="beta")
coef2 <- make.coef(fun=conbasis, parvec=0.01,  estimate=TRUE, coeftype="beta")
coef3 <- make.coef(fun=conbasis, parvec=0.25,  estimate=TRUE, coeftype="alpha")
coefList  <- vector("list",3)
coefList[[1]] <- coef1
coefList[[2]] <- coef2
coefList[[3]] <- coef3
#  check coefficient list
coefCheckList <- coefCheck(coefList)
coefList      <- coefCheckList$coefList
ntheta        <- coefCheckList$ntheta
print(paste("ntheta = ",ntheta))
# Define the two terms in the homogeneous part of the equation
Xterm0 <- make.Xterm(variable=1, derivative=0, ncoef=1, factor=-1)
Xterm1 <- make.Xterm(variable=1, derivative=1, ncoef=2, factor=-1)
# Set up the XList vector of length two
XList <- vector("list",2)
XList[[1]] <- Xterm0
XList[[2]] <- Xterm1
# Define a unit pulse function located at times 14-15
Pulsebasis <- create.bspline.basis(HeadImpactRng, 3, 1, c(0,14,15,60))
Pulsefd    <- fd(matrix(c(0,1,0),3,1),Pulsebasis)
# Define the forcing term
Fterm      <- make.Fterm(ncoef=3, Ufd=Pulsefd, factor=1)
# Set up the forcing term list of length one
FList      <- vector("list",1)
FList[[1]] <- Fterm
#  Define the single differential equation in the model
HeadImpactVariable <- make.variable(order=2, XList=XList, FList=FList)
#  Define list of length one containing the equation definition
HeadImpactList=vector("list",1)
HeadImpactList[[1]] <- HeadImpactVariable
#  check the object for internal consistency
HeadImpactList <- modelCheck(HeadImpactList, coefList)
#  Define the List array containing the data
yList1 = list(argvals=HeadImpactTime, y=HeadImpact)
yList <- vector("list",1)
yList[[1]] <- yList1
#  Construct basis for output x(t), multiple knots at times 14 and 15
#  Order 6 spline basis, with three knots at the impact point and
#  three knots at impact + delta to permit discontinuous first
#  derivatives at these points
knots     <- c(0,14,14,14,15,15,seq(15,60,len=11))
norder    <- 6
nbasis    <- 21
HeadImpactBasis <- create.bspline.basis(HeadImpactRng,nbasis,norder,knots)
#  plot the basis
HeadImpactTimefine <- seq(0,60,len=201)
HeadImpactBasisfine <- eval.basis(HeadImpactTimefine, HeadImpactBasis)
matplot(HeadImpactTimefine, HeadImpactBasisfine, type="l", xlim=c(0,60), ylim=c(0,1),
xlab="Time t", ylab="Basis functions phi(t)")
lines(c(14,14), c(0,1), lty=2)
lines(c(15,15), c(0,1), lty=2)
#  set up basis list
XbasisList <- vector("list",1)
XbasisList[[1]] <- HeadImpactBasis
# An evaluation of the criterion at the initial values
rhoVec <- 0.5  #  light smoothing
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
library(R.cache)
library(Matrix)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
sourceDirectory("/Users/michellecarey/Desktop/Data2LD_Fix/R")
#  This command causes Data2LD to set up and save the tensors
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
sourceDirectory("/Users/michellecarey/Desktop/Data2LD_Fix/src")
#  This command causes Data2LD to set up and save the tensors
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
sourceDirectory("/Users/michellecarey/Desktop/Data2LD_Fix/src/")
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
sourceDirectory("/Users/michellecarey/Desktop/Data2LD_Fix/R")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/RmatFn.so")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/RmatFn.so")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/SmatFn.so")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/loopJuan.so")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/init.so")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/DRarrayFn.so")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/Data2LD.so")
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/DASarrayFn.so")
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
dyn.load("/Users/michellecarey/Desktop/Data2LD_Fix/src/RmatFn.so")
Data2LDResult <- Data2LD(yList, XbasisList, HeadImpactList, coefList, rhoVec)
is.loaded("RmatFn")
